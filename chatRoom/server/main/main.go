package main

import (
	"fmt"
	"net"
)

/*
在编写网络编程项目时，如果牵扯到发送数据读取数据时，一定要注意读取长度！！！！！在给定缓冲器时，如果不确定长度可以使用两个利用for循环循环读取，再确定长度，如果已知长度，务必确定读取长度！！！
在编写网络编程项目时，如果牵扯到发送数据读取数据时，一定要注意读取长度！！！！！在给定缓冲器时，如果不确定长度可以使用两个利用for循环循环读取，再确定长度，如果已知长度，务必确定读取长度！！！
在编写网络编程项目时，如果牵扯到发送数据读取数据时，一定要注意读取长度！！！！！在给定缓冲器时，如果不确定长度可以使用两个利用for循环循环读取，再确定长度，如果已知长度，务必确定读取长度！！！
在编写网络编程项目时，如果牵扯到发送数据读取数据时，一定要注意读取长度！！！！！在给定缓冲器时，如果不确定长度可以使用两个利用for循环循环读取，再确定长度，如果已知长度，务必确定读取长度！！！
在编写网络编程项目时，如果牵扯到发送数据读取数据时，一定要注意读取长度！！！！！在给定缓冲器时，如果不确定长度可以使用两个利用for循环循环读取，再确定长度，如果已知长度，务必确定读取长度！！！
在编写网络编程项目时，如果牵扯到发送数据读取数据时，一定要注意读取长度！！！！！在给定缓冲器时，如果不确定长度可以使用两个利用for循环循环读取，再确定长度，如果已知长度，务必确定读取长度！！！
在编写网络编程项目时，如果牵扯到发送数据读取数据时，一定要注意读取长度！！！！！在给定缓冲器时，如果不确定长度可以使用两个利用for循环循环读取，再确定长度，如果已知长度，务必确定读取长度！！！
在编写网络编程项目时，如果牵扯到发送数据读取数据时，一定要注意读取长度！！！！！在给定缓冲器时，如果不确定长度可以使用两个利用for循环循环读取，再确定长度，如果已知长度，务必确定读取长度！！！
在编写网络编程项目时，如果牵扯到发送数据读取数据时，一定要注意读取长度！！！！！在给定缓冲器时，如果不确定长度可以使用两个利用for循环循环读取，再确定长度，如果已知长度，务必确定读取长度！！！
*/
func main() {
	//提示信息
	fmt.Println("监听端口8888")
	listen, err := net.Listen("tcp", ":8888")
	if err != nil {
		fmt.Println("监听端口错误:", err)
		return
	}
	//循环等待，客户端连接
	for {
		conn, err := listen.Accept()
		if err != nil {
			fmt.Println("接受客户端连接错误")
			continue
		}
		go processor(conn)
	}
}

func processor(conn net.Conn) {
	defer func() {
		err := conn.Close()
		if err != nil {
			fmt.Println("process conn close error", err)
			return
		} else {
			fmt.Println("server close connection with client")
		}
	}()
	pr := &Processor{Conn: conn}
	pr.Processor()
}

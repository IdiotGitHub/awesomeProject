package main

import (
	"fmt"
	"runtime"
	"time"
)

/**
goroutine
进程和线程说明
	1.进程就是程序在操作系统中的一次执行过程，是系统进行资源分配和调度的基本单位
	2.线程是进程的一个执行实例，是程序执行的最小单元，它是比进程更小的能独立运行的基本单元
	3.一个进程可以创建和销毁多个线程，同一个进程中的多个线程可以并发执行
	4.一个程序至少有一个进程，一个进程至少有一个线程
并发和并行
	1.多线程程序在单核上运行，就是并发
		特点：
			1.多个任务作用在一个CPU
			2.从微观的角度看，再一个时间点上，只有一个任务在执行
	2.多线程程序在多核上运行，就是并行
		特点：
			1.多个任务作用在多个CPU
			2.从微观的角度看，在一个时间点上，就是多个任务在同时执行
Go协程和Go主线程
	1.Go主线程：一个Go线程上，可以起多个协程，
	2.Go协程的特点
		1.有独立的栈空间
		2.共享程序堆空间
		3.调度由用户控制
		4.协程是轻量级的线程
	如果主线程退出，则协程即使没有执行完毕也会退出
	1.主线程是一个物理线程，直接作用在cpu上的。是重量级的，非常消耗cpu资源，
	2.协程是从主线程开启的，是轻量级的线程，是逻辑态。对资源消耗相对较小。
	3.Golang的协程机制是重要的特点，可以轻松的开启上万个协程。其他编程语言的并发机制一般基于线程的，开过多的线程，资源耗费大，
goroutine的调度模型--MPG
	1.M:操作系统的主线程（是物理线程）
	2.P:协程执行需要的上下文
	3.G:协程

*/

func main() {
	/*	go PrintHelloWorld()
		for {
			fmt.Println("main :Hello world!")
			time.Sleep(time.Second)
		}
	*/
	fmt.Println("CPU", runtime.NumCPU())
}
func PrintHelloWorld() {
	for {
		fmt.Println("Hello world!")
		time.Sleep(time.Second)
	}
}

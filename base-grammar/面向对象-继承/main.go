package main

/*
面向对象--继承
	继承可以解决代码复用性，让我们的编程更加靠近人类思维
	当多个结构体存在相同的属性和方法是就可以从这几个结构体中抽象出一个结构体
	其他的结构体不需要重新定义这些属性（字段）和方法，只需要嵌套一个Student匿名结构体即可
	也就是说在Golang中，如果一个struct嵌套了另一个匿名结构体，那么这个结构体可以直接访问匿名结构体的字段和方法，从而实现了继承特性
有点：
	1.提高代码复用性
	2.扩展性和可维护性提高
注意事项和使用细节
	1.结构体可以使用嵌套匿名结构体的所有字段和方法（不管结构体的字段和方法的首字母是大写还是小写）
	2.匿名结构体字段访问可以简化
	3.当结构体和匿名结构体有相同名称的字段或方法，那么在调用的时候使用就近原则，如果想调用匿名结构体中的字段或方法，可以通过匿名结构体名来访问
	4.结构体嵌入两个（或多个）匿名结构体，如果两个匿名结构体有相同的字段和方法（同时结构体本身没有同名的字段和方法），在访问时，就必须明确匿名结构体名
	5.如果一个结构团体嵌套了一个有名结构体，这种模式就是组合，如果是组合关系，那么在访问组合的结构体的字段或方法时就必须使用嵌套结构体名
	6.嵌套匿名结构体后，也可以在创建结构体变量时，直接指定各个匿名结构体字段的值
	7.结构体内也可以把基本类型当作匿名结构体进行嵌套，使用的时候直接加点访问即可
	8.Golang支持多重继承，就是嵌套多个结构体即可，不建议使用
*/
func main() {

}

type Student struct {
	Name  string
	Age   int
	Score float64
}

func (s *Student) SetName(name string) {
	s.Name = name
}

type Pupil struct {
	Student
}
type Graduate struct {
	Student
}
